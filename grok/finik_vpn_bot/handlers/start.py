# handlers/start.py
from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from utils.db import get_user_status, register_referral
from utils.marzban import get_marzban_token, get_available_inbounds, create_vpn_user
import logging

logger = logging.getLogger(__name__)

router = Router()

@router.message(F.text.startswith("/start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start, text={message.text}", extra=logging_extra)
    await message.delete()

    username = message.from_user.username or message.from_user.first_name
    status = await get_user_status(user_id)

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É"
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É", callback_data="start_install")]
    ])

    # –õ–æ–≥–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞
    args = message.text.split(maxsplit=1)
    if len(args) > 1 and args[1].startswith("ref_"):
        try:
            referrer_id = int(args[1].split("_")[1])
            logging_extra["referrer_id"] = referrer_id
            if referrer_id != user_id:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: referrer_id={referrer_id}", extra=logging_extra)
                success = await register_referral(referrer_id, user_id)
                if success:
                    welcome_text = (
                        f"–ü—Ä–∏–≤–µ—Ç, {username}!\n"
                        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ –¥—Ä—É–≥–∞.\n"
                        f"–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    )
                    try:
                        await message.bot.send_message(
                            referrer_id,
                            f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! "
                            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ 3 –¥–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ–≥–¥–∞ –æ–Ω –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É."
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è referrer_id={referrer_id}: {str(e)}", extra=logging_extra)
                else:
                    welcome_text = (
                        f"–ü—Ä–∏–≤–µ—Ç, {username}!\n"
                        f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.\n"
                        f"–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    )
            else:
                welcome_text = (
                    f"–ü—Ä–∏–≤–µ—Ç, {username}!\n"
                    f"–ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
        except (ValueError, IndexError) as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {str(e)}", extra=logging_extra)
            welcome_text = (
                f"–ü—Ä–∏–≤–µ—Ç, {username}!\n"
                f"–û—à–∏–±–∫–∞ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
    else:
        if not status:
            await register_referral(None, user_id)
            welcome_text = (
                f"–ü—Ä–∏–≤–µ—Ç, {username}!\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–ò–ù–ò–ö üõ∞Ô∏è\n"
                f"–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        else:
            welcome_text = (
                f"–ü—Ä–∏–≤–µ—Ç, {username}!\n"
                f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
                f"–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å!\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ inline-–∫–Ω–æ–ø–∫–æ–π
    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π '–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É'", extra=logging_extra)
    await message.answer(f"{welcome_text}\n\nüëáüëáüëá", reply_markup=inline_keyboard)

@router.callback_query(F.data == "start_install")
async def start_install(callback: CallbackQuery):
    user_id = callback.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É'", extra=logging_extra)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å inline-–∫–Ω–æ–ø–∫–æ–π)
    await callback.message.delete()

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–Ω–æ–ø–∫–∏)
    reply_keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å"), KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")],
            [KeyboardButton(text="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"), KeyboardButton(text="üõ†Ô∏è –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å reply-–∫–Ω–æ–ø–∫–∞–º–∏
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì± iPhone", callback_data="device_iphone")],
        [InlineKeyboardButton(text="ü§ñ Android", callback_data="device_android")],
        [InlineKeyboardButton(text="üíª MacBook", callback_data="device_mac")],
        [InlineKeyboardButton(text="üñ•Ô∏è Windows", callback_data="device_windows")]
    ])
    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboardMarkup –∏ –≤—ã–±–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤", extra=logging_extra)
    await callback.message.answer(text, reply_markup=reply_keyboard)
    await callback.message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("device_"))
async def device_selected(callback: CallbackQuery):
    user_id = callback.from_user.id
    device = callback.data.split("_")[1]
    logging_extra = {"user_id": user_id}
    logger.info(f"–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device}", extra=logging_extra)
    await callback.message.delete()

    status = await get_user_status(user_id)
    reply_keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å"), KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")],
            [KeyboardButton(text="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"), KeyboardButton(text="üõ†Ô∏è –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ]
    )

    if not status["active"]:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å", callback_data="buy_subscription")]
        ])
        await callback.message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ '–ö—É–ø–∏—Ç—å'.",
            reply_markup=keyboard
        )
        return

    if not status["vpn_key"]:
        token = await get_marzban_token()
        if not token:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Marzban", extra=logging_extra)
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        username = f"user_{user_id}"
        inbounds = await get_available_inbounds(token)
        if not inbounds:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å inbounds", extra=logging_extra)
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return
        vpn_key = await create_vpn_user(token, username, inbounds)
        if not vpn_key or not vpn_key.get("subscription_url"):
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á", extra=logging_extra)
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return
        await save_vpn_key(user_id, vpn_key["subscription_url"])
        status = await get_user_status(user_id)

    v2raytun_url = f"https://apps.artydev.ru/?url=v2raytun://import/{status['vpn_key']}#FinikVPN"
    if device == "iphone":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å", url="https://apps.apple.com/kz/app/v2raytun/id6476628951")],
            [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", url=v2raytun_url)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_devices")]
        ])
    elif device == "android":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å", url="https://play.google.com/store/apps/details?id=com.v2ray.ang")],
            [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", url=v2raytun_url)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_devices")]
        ])
    elif device == "mac":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å", url="https://github.com/v2fly/v2ray-core/releases")],
            [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", url=v2raytun_url)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_devices")]
        ])
    elif device == "windows":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å", url="https://github.com/2dust/v2rayN/releases")],
            [InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", url=v2raytun_url)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_devices")]
        ])
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {device.capitalize()}:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.callback_query(F.data == "buy_subscription")
async def buy_subscription_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ '–ö—É–ø–∏—Ç—å'", extra=logging_extra)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()

    # –õ–æ–≥–∏–∫–∞ –∏–∑ buy_handler
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ 149 ‚ÇΩ - 1 –º–µ—Å—è—Ü", callback_data="buy_30")],
        [InlineKeyboardButton(text="üí∞ 370 ‚ÇΩ - 3 –º–µ—Å—è—Ü–∞", callback_data="buy_90")],
        [InlineKeyboardButton(text="üí∞ 625 ‚ÇΩ - 6 –º–µ—Å—è—Ü–µ–≤", callback_data="buy_180")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "back_to_devices")
async def back_to_devices(callback: CallbackQuery):
    user_id = callback.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'", extra=logging_extra)
    await callback.message.delete()

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì± iPhone", callback_data="device_iphone")],
        [InlineKeyboardButton(text="ü§ñ Android", callback_data="device_android")],
        [InlineKeyboardButton(text="üíª MacBook", callback_data="device_mac")],
        [InlineKeyboardButton(text="üñ•Ô∏è Windows", callback_data="device_windows")]
    ])
    await callback.message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data == "clear_message")
async def clear_message(callback: CallbackQuery):
    user_id = callback.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è", extra=logging_extra)
    await callback.message.delete()
    await callback.answer()

@router.message(F.text == "üõ†Ô∏è –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: Message):
    user_id = message.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–ó–∞–ø—Ä–æ—Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏", extra=logging_extra)
    await message.delete()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="tg://resolve?domain=teso001")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="clear_message")]
    ])
    await message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –¥–ª—è —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:", reply_markup=keyboard)

@router.message(F.text == "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
async def install_handler(message: Message):
    user_id = message.from_user.id
    logging_extra = {"user_id": user_id}
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'", extra=logging_extra)
    await message.delete()

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì± iPhone", callback_data="device_iphone")],
        [InlineKeyboardButton(text="ü§ñ Android", callback_data="device_android")],
        [InlineKeyboardButton(text="üíª MacBook", callback_data="device_mac")],
        [InlineKeyboardButton(text="üñ•Ô∏è Windows", callback_data="device_windows")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="clear_message")]
    ])
    await message.answer(text, reply_markup=keyboard)

def setup_start_handlers(dp: Router):
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ start")
    dp.include_router(router)